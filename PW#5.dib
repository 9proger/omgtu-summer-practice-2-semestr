#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №5. Идиома производитель-потребитель.

**Цель:** Изучить примитив синхронизации Очередь сообщений.

**Результаты:** После выполнения работы Вы сможете:
1. Передавать данные между потоками.
2. Изучите примтив синхронизации, который используется в современных архитектурах высоко-нагруженных приложений Event Loop


**Материалы для самостоятельного изучения**.
1. [Потоко-безопасные коллекции](https://learn.microsoft.com/en-us/dotnet/standard/collections/thread-safe/)
2. Идиома производитель-потребитель Глава 4 книги Г. Эндрюс Основы многопоточного, параллельного и распределенного программирования

## Задание.
Реализовать приложение Ping-Pong.

Создать дав потока, каждый из которых в цикле читает данные из BlockingCollection<Message>. После того, как поток прочитал объект из очереди, вызвал его метод Handle(), он создает новый объект класса Message и записывает его в очередь другого потока. Каждый поток всего должен обработать 100 сообщений.

**Указание**.
1. Как запустить процесс обмена объектами Message между потоками? Первый объект Message пишем в очередь одного из потоков прямо из кода, коорый жти потоки стартовал.
2. Не забываем дождаться завершения работы потоков.

#!csharp

#r "nuget: xunit, 2.8.1"
using System.Threading;
using Xunit;

class Message
{
    static int messageHandled = 0;
    int id;
    public Message()
    {
        id = Thread.CurrentThread.ManagedThreadId;
    }

    public void Handle()
    {
        Interlocked.Increment(ref messageHandled);
        Assert.NotEqual(id, Thread.CurrentThread.ManagedThreadId);
    }

    public static void Check()
    {
        Assert.Equal(200, messageHandled);
    }
}

#!csharp

using System.Collections.Concurrent;
using System.Threading;
var queue1 = new BlockingCollection<Message>(2); //очередь первого потока
var queue2 = new BlockingCollection<Message>(2); //очередь второго потока

// Здесь писать решение
Thread sol1 = new Thread(()=>{
    Message Wrts1 = new Message();
    queue2.Add(Wrts1);
    Message data1 = null;
    int l=0;

    while (!queue1.IsCompleted)
    {
        data1 = null;
        try
        {
            data1 = queue1.Take();
        }
        catch (InvalidOperationException) {}
        if (data1 != null)
        {
            data1.Handle();
            Message Wrt1 =null;
            Wrt1 = new Message();
            l++;
            if (l>=100)
            {
                break;
            }
            queue2.Add(Wrt1);
        }
    }
});
int k=0;
Thread sol2 = new Thread(()=>{
    Message Wrts2 = new Message();
    queue1.Add(Wrts2);
    k=0;
    Message data2 = null;
    while (!queue2.IsCompleted)
    {
        

        data2 = null;
        try
        {
            data2 = queue2.Take();
        }
        catch (InvalidOperationException) {
         }
        if (data2 != null)
        {
        data2.Handle();
        Message Wrt2=null;
        Wrt2 = new Message();
        k++;
        if (k>=100)
        {
            break;
        }
        queue1.Add(Wrt2);
        }
    }
});
sol1.Start();
sol2.Start();
sol1.Join();
sol2.Join();

#!csharp

Assert.Equal(0, queue1.Count);
Assert.Equal(0, queue2.Count);
Message.Check();
